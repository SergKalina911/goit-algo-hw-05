"""                                         Четверте завдання

    Доробіть консольного бота помічника з попереднього домашнього завдання та додайте обробку помилок за допомоги декораторів.

                        Вимоги до завдання:

    1. Всі помилки введення користувача повинні оброблятися за допомогою декоратора input_error. Цей декоратор відповідає за 
    повернення користувачеві повідомлень типу "Enter user name", "Give me name and phone please" тощо.
    2. Декоратор input_error повинен обробляти винятки, що виникають у функціях — handler — і це винятки KeyError, ValueError, 
    IndexError. Коли відбувається виняток декоратор повинен повертати відповідь користувачеві. Виконання програми при цьому не припиняється.

                        Рекомендації для виконання:

    В якості прикладу додамо декоратор input_error для обробки помилки ValueError

def input_error(func):
    def inner(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except ValueError:
            return "Give me name and phone please."

    return inner

    Та обгорнемо декоратором функцію add_contact нашого бота, щоб ми почали обробляти помилку ValueError.

@input_error
def add_contact(args, contacts):
    name, phone = args
    contacts[name] = phone
    return "Contact added."

    Вам треба додати обробники до інших команд (функцій), та додати в декоратор обробку обробку винятків інших типів з 
відповідними повідомленнями.

                        Критерії оцінювання:

    1. Наявність декоратора input_error, який обробляє помилки введення користувача для всіх команд.
    2. Обробка помилок типу KeyError, ValueError, IndexError у функціях за допомогою декоратора input_error.
    3. Кожна функція для обробки команд має власний декоратор input_error, який обробляє відповідні помилки і повертає відповідні 
    повідомлення про помилку.
    4. Коректна реакція бота на різні команди та обробка помилок введення без завершення програми.

                        Приклад використання:

    При запуску скрипту діалог з ботом повинен бути схожим на цей.

Enter a command: add
Enter the argument for the command
Enter a command: add Bob
Enter the argument for the command
Enter a command: add Jime 0501234356
Contact added.
Enter a command: phone
Enter the argument for the command
Enter a command: all
Jime: 0501234356 
Enter a command:
"""

def input_error(func):
    """ Декоратор для обробки помилок введення користувача.
    Параметри:
    func (function): Функція, яку потрібно обгорнути декоратором.
    Повертає:
    function: Функція, яка обробляє помилки введення та повертає відповідні повідомлення."""
    
    # Внутрішня функція, яка обробляє виклики функції
    def inner(*args, **kwargs):
        # Спробуємо виконати функцію. Якщо виникне помилка, вона буде оброблена в except блоках
        try:
            return func(*args, **kwargs)
        except ValueError:
            # Якщо виникла помилка ValueError, повертаємо повідомлення про помилку
            return "Give me name and phone please."
        except KeyError:
            # Якщо виникла помилка KeyError, повертаємо повідомлення про відсутність контакту
            return "Contact not found. Please check the name."
        except IndexError:
            # Якщо виникла помилка IndexError, повертаємо повідомлення про неправильну кількість аргументів
            return "Invalid command. Please provide the correct number of arguments."
        except Exception as e:
            # Обробка інших винятків, які можуть виникнути
            return f"An unexpected error occurred: {str(e)}"
    # Повертаємо внутрішню функцію
    return inner

def parse_input(user_input):
    """ Функція для розбору введеного користувачем рядка на команду та аргументи.
    Параметри:
    user_input (str): Рядок, введений користувачем, який містить команду та аргументи.
    Повертає:
    tuple: Кортеж, що містить команду (str) та список аргументів (str)."""
    # Розбиваємо введений рядок на слова та видаляємо зайві пробіли
    cmd, *args = user_input.split()
    # Перетворюємо команду на нижній регістр для уніфікації
    cmd = cmd.strip().lower()
    # Повертаємо команду та аргументи
    return cmd, *args

@input_error
# Декоратор input_error обгортає функцію add_contact для обробки помилок введення користувача
def add_contact(args, contacts):
    """ Функція для додавання нового контакту до словника контактів.
    Параметри:
    args (list): Список, що містить ім'я та номер телефону.
    contacts (dict): Словник, де зберігаються контакти.
    Повертає:
    str: Повідомлення про успішне додавання контакту."""
    
    # # Перевіряємо, чи передано правильну кількість аргументів
    # if len(args) != 2:
    #     # Якщо аргументів не два, повертаємо повідомлення про помилку
    #     return "Invalid command. Usage: add username phone"
    
    # Розпаковуємо аргументи в змінні name та phone
    name, phone = args
    contacts[name] = phone
    return "Contact added."
    
def change_contact(args, contacts):
    """ Функція для зміни номера телефону існуючого контакту.
    Параметри:
    args (list): Список, що містить ім'я та новий номер телефону.
    contacts (dict): Словник, де зберігаються контакти.
    Повертає:
    str: Повідомлення про успішне оновлення контакту або про помилку."""
    
    # Перевіряємо, чи передано правильну кількість аргументів
    # if len(args) != 2:
    #     # Якщо аргументів не два, повертаємо повідомлення про помилку
    #     return "Invalid command. Usage: change username phone"
    
    # Розпаковуємо аргументи в змінні name та phone
    name, phone = args
    # Перевіряємо, чи існує контакт з таким ім'ям
    if name in contacts:
    #     # Якщо контакт існує, оновлюємо його номер телефону
        contacts[name] = phone
        # повертаємо повідомлення про успішне оновлення контакту
        return "Contact updated."
    else:
    #     # Якщо контакт не існує, повертаємо повідомлення про помилку
        return f"Contact '{name}' not found."

def show_phone(args, contacts):
    """ Функція для показу номера телефону за ім'ям контакту.
    Параметри:
    args (list): Список, що містить ім'я контакту.
    contacts (dict): Словник, де зберігаються контакти.
    Повертає:
    str: Номер телефону контакту або повідомлення про помилку, якщо контакт не знайдено."""
    # Перевіряємо, чи передано правильну кількість аргументів
    if len(args) != 1:
        # Якщо аргументів не один, повертаємо повідомлення про помилку
        return "Invalid command. Usage: phone username"
    # Розпаковуємо аргумент в змінну name
    name = args[0]
    # Перевіряємо, чи існує контакт з таким ім'ям
    if name in contacts:
        # Якщо контакт існує, повертаємо його номер телефону
        return f"{name}'s phone number is {contacts[name]}."
    else:
        # Якщо контакт не існує, повертаємо повідомлення про помилку
        return f"Contact '{name}' not found."

def show_all(contacts):
    """ Функція для показу всіх контактів та їх номерів телефонів.
    Параметри:
    contacts (dict): Словник, де зберігаються контакти.
    Повертає:
    str: Список всіх контактів з номерами телефонів або повідомлення, якщо контакти відсутні.
    """
    # Перевіряємо, чи є контакти в словнику
    if not contacts:
        # Якщо словник порожній, повертаємо повідомлення про відсутність контактів
        return "No contacts found."
    # Форматуємо рядок з усіма контактами
    return "\n".join([f"{name}: {phone}" for name, phone in contacts.items()])

def main():
    """ Основна функція, яка запускає бот-помічник та обробляє команди користувача.
    Вона містить нескінченний цикл, який чекає на введення команди користувачем та
    виконує відповідні дії в залежності від введеної команди."""
    # Ініціалізуємо словник для зберігання контактів
    contacts = {}
    # Виводимо привітальне повідомлення
    print("Welcome to the assistant bot!")
    # Починаємо нескінченний цикл для обробки команд
    while True:
        # Отримуємо введення користувача
        user_input = input("Enter a command: ")
        # Розбираємо введення користувача на команду та аргументи
        command, *args = parse_input(user_input)
        # Перевіряємо, чи команда є однією з команд для завершення роботи
        if command in ["close", "exit"]:
            # Якщо команда є "close" або "exit", виводимо прощальне повідомлення 
            # та завершуємо роботу
            print("Good bye!")
            break
        elif command == "hello":
            # Якщо команда є "hello", виводимо повідомлення про допомогу
            # та запитуємо, як можемо допомогти
            print("How can I help you?")
        elif command == "add":
            # Якщо команда є "add", викликаємо функцію для додавання контакту
            # та передаємо аргументи та словник контактів
            print(add_contact(args, contacts))
        elif command == "change":
            # Якщо команда є "change", викликаємо функцію для зміни контакту
            # та передаємо аргументи та словник контактів
            print(change_contact(args, contacts))
        elif command == "phone":
            # Якщо команда є "phone", викликаємо функцію для показу номера телефону
            # та передаємо аргументи та словник контактів
            print(show_phone(args, contacts))
        elif command == "all":
            # Якщо команда є "all", викликаємо функцію для показу всіх контактів
            # та передаємо словник контактів
            print(show_all(contacts))
        else:
            # Якщо команда не розпізнана, виводимо повідомлення про невірну команду
            # та запитуємо ввести правильну команду (йдемо на початок циклу)
            print("Invalid command.")
if __name__ == "__main__":
    main()